const nodemailer = require('nodemailer');
const winston = require('../config/logger');

class EmailService {
  constructor() {
    this.transporter = null;
    this.setupTransporter();
  }

  setupTransporter() {
    this.transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: process.env.SMTP_PORT,
      secure: process.env.SMTP_PORT == 465, // true for 465, false for other ports
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
      }
    });

    // Verify connection
    this.transporter.verify((error, success) => {
      if (error) {
        winston.error('‚ùå SMTP connection failed:', error);
      } else {
        winston.info('‚úÖ SMTP server is ready to send emails');
      }
    });
  }

  /**
   * Send email verification
   * @param {String} email - Recipient email
   * @param {String} name - Recipient name
   * @param {String} verificationUrl - Verification URL
   */
  async sendEmailVerification(email, name, verificationUrl) {
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
          <meta charset="utf-8">
          <title>X√°c minh email - HostFileDrive</title>
          <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
              .container { max-width: 600px; margin: 0 auto; padding: 20px; }
              .header { background: #1976d2; color: white; padding: 20px; text-align: center; }
              .content { padding: 30px 20px; }
              .button { display: inline-block; background: #1976d2; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
              .footer { background: #f5f5f5; padding: 20px; text-align: center; font-size: 12px; color: #666; }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header">
                  <h1>HostFileDrive</h1>
              </div>
              <div class="content">
                  <h2>Ch√†o ${name}!</h2>
                  <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n HostFileDrive. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng x√°c minh email c·ªßa b·∫°n.</p>
                  <p>Nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ x√°c minh email:</p>
                  <a href="${verificationUrl}" class="button">X√°c minh Email</a>
                  <p>Ho·∫∑c copy link sau v√†o tr√¨nh duy·ªát:</p>
                  <p style="word-break: break-all; color: #1976d2;">${verificationUrl}</p>
                  <p><strong>L∆∞u √Ω:</strong> Link n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.</p>
                  <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu x√°c minh n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
              </div>
              <div class="footer">
                  <p>¬© 2025 HostFileDrive. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
                  <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
              </div>
          </div>
      </body>
      </html>
    `;

    const mailOptions = {
      from: `"HostFileDrive" <${process.env.EMAIL_FROM}>`,
      to: email,
      subject: 'X√°c minh email - HostFileDrive',
      html: htmlContent
    };

    try {
      const result = await this.transporter.sendMail(mailOptions);
      winston.info(`‚úÖ Verification email sent to ${email}`);
      return result;
    } catch (error) {
      winston.error(`‚ùå Failed to send verification email to ${email}:`, error);
      throw new Error('Failed to send verification email');
    }
  }

  /**
   * Send password reset email
   * @param {String} email - Recipient email
   * @param {String} name - Recipient name
   * @param {String} resetUrl - Password reset URL
   */
  async sendPasswordReset(email, name, resetUrl) {
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
          <meta charset="utf-8">
          <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - HostFileDrive</title>
          <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
              .container { max-width: 600px; margin: 0 auto; padding: 20px; }
              .header { background: #d32f2f; color: white; padding: 20px; text-align: center; }
              .content { padding: 30px 20px; }
              .button { display: inline-block; background: #d32f2f; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
              .footer { background: #f5f5f5; padding: 20px; text-align: center; font-size: 12px; color: #666; }
              .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 15px 0; }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header">
                  <h1>HostFileDrive</h1>
              </div>
              <div class="content">
                  <h2>Ch√†o ${name}!</h2>
                  <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n.</p>
                  <div class="warning">
                      <strong>‚ö†Ô∏è L∆∞u √Ω b·∫£o m·∫≠t:</strong>
                      <ul>
                          <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y</li>
                          <li>Link ƒë·∫∑t l·∫°i ch·ªâ c√≥ hi·ªáu l·ª±c trong 10 ph√∫t</li>
                          <li>Kh√¥ng chia s·∫ª link n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                      </ul>
                  </div>
                  <p>Nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
                  <a href="${resetUrl}" class="button">ƒê·∫∑t l·∫°i M·∫≠t kh·∫©u</a>
                  <p>Ho·∫∑c copy link sau v√†o tr√¨nh duy·ªát:</p>
                  <p style="word-break: break-all; color: #d32f2f;">${resetUrl}</p>
              </div>
              <div class="footer">
                  <p>¬© 2025 HostFileDrive. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
                  <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
              </div>
          </div>
      </body>
      </html>
    `;

    const mailOptions = {
      from: `"HostFileDrive" <${process.env.EMAIL_FROM}>`,
      to: email,
      subject: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - HostFileDrive',
      html: htmlContent
    };

    try {
      const result = await this.transporter.sendMail(mailOptions);
      winston.info(`‚úÖ Password reset email sent to ${email}`);
      return result;
    } catch (error) {
      winston.error(`‚ùå Failed to send password reset email to ${email}:`, error);
      throw new Error('Failed to send password reset email');
    }
  }

  /**
   * Send file share notification
   * @param {String} email - Recipient email
   * @param {String} sharer - Name of person sharing
   * @param {String} fileName - Name of shared file
   * @param {String} shareUrl - Share URL
   * @param {String} message - Optional message
   */
  async sendFileShareNotification(email, sharer, fileName, shareUrl, message = '') {
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
          <meta charset="utf-8">
          <title>File ƒë∆∞·ª£c chia s·∫ª - HostFileDrive</title>
          <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
              .container { max-width: 600px; margin: 0 auto; padding: 20px; }
              .header { background: #4caf50; color: white; padding: 20px; text-align: center; }
              .content { padding: 30px 20px; }
              .button { display: inline-block; background: #4caf50; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
              .footer { background: #f5f5f5; padding: 20px; text-align: center; font-size: 12px; color: #666; }
              .file-info { background: #f9f9f9; padding: 15px; border-radius: 5px; margin: 15px 0; }
              .message-box { background: #e3f2fd; border: 1px solid #2196f3; padding: 15px; border-radius: 5px; margin: 15px 0; }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header">
                  <h1>üìÅ HostFileDrive</h1>
              </div>
              <div class="content">
                  <h2>File ƒë∆∞·ª£c chia s·∫ª v·ªõi b·∫°n!</h2>
                  <p><strong>${sharer}</strong> ƒë√£ chia s·∫ª m·ªôt file v·ªõi b·∫°n qua HostFileDrive.</p>
                  
                  <div class="file-info">
                      <h3>üìÑ ${fileName}</h3>
                  </div>
                  
                  ${message ? `
                  <div class="message-box">
                      <h4>üí¨ Tin nh·∫Øn t·ª´ ${sharer}:</h4>
                      <p>"${message}"</p>
                  </div>
                  ` : ''}
                  
                  <p>Nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ xem file:</p>
                  <a href="${shareUrl}" class="button">Xem File</a>
                  
                  <p>Ho·∫∑c copy link sau v√†o tr√¨nh duy·ªát:</p>
                  <p style="word-break: break-all; color: #4caf50;">${shareUrl}</p>
              </div>
              <div class="footer">
                  <p>¬© 2025 HostFileDrive. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
                  <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
              </div>
          </div>
      </body>
      </html>
    `;

    const mailOptions = {
      from: `"HostFileDrive" <${process.env.EMAIL_FROM}>`,
      to: email,
      subject: `${sharer} ƒë√£ chia s·∫ª "${fileName}" v·ªõi b·∫°n`,
      html: htmlContent
    };

    try {
      const result = await this.transporter.sendMail(mailOptions);
      winston.info(`‚úÖ File share notification sent to ${email}`);
      return result;
    } catch (error) {
      winston.error(`‚ùå Failed to send file share notification to ${email}:`, error);
      throw new Error('Failed to send file share notification');
    }
  }

  /**
   * Send welcome email
   * @param {String} email - Recipient email
   * @param {String} name - Recipient name
   */
  async sendWelcomeEmail(email, name) {
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
          <meta charset="utf-8">
          <title>Ch√†o m·ª´ng ƒë·∫øn v·ªõi HostFileDrive</title>
          <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
              .container { max-width: 600px; margin: 0 auto; padding: 20px; }
              .header { background: linear-gradient(135deg, #1976d2, #42a5f5); color: white; padding: 30px; text-align: center; }
              .content { padding: 30px 20px; }
              .feature { display: flex; align-items: center; margin: 15px 0; }
              .feature-icon { font-size: 24px; margin-right: 15px; }
              .button { display: inline-block; background: #1976d2; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
              .footer { background: #f5f5f5; padding: 20px; text-align: center; font-size: 12px; color: #666; }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header">
                  <h1>üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi HostFileDrive!</h1>
              </div>
              <div class="content">
                  <h2>Xin ch√†o ${name}!</h2>
                  <p>Ch√∫c m·ª´ng b·∫°n ƒë√£ tr·ªü th√†nh th√†nh vi√™n c·ªßa HostFileDrive - n·ªÅn t·∫£ng l∆∞u tr·ªØ v√† chia s·∫ª file h√†ng ƒë·∫ßu!</p>
                  
                  <h3>üöÄ T√≠nh nƒÉng n·ªïi b·∫≠t:</h3>
                  <div class="feature">
                      <span class="feature-icon">‚òÅÔ∏è</span>
                      <div>
                          <strong>L∆∞u tr·ªØ ƒë√°m m√¢y:</strong> 
                          Upload v√† l∆∞u tr·ªØ files an to√†n tr√™n Google Drive
                      </div>
                  </div>
                  <div class="feature">
                      <span class="feature-icon">üé¨</span>
                      <div>
                          <strong>Stream video:</strong> 
                          Xem video tr·ª±c ti·∫øp v·ªõi c√¥ng ngh·ªá HLS
                      </div>
                  </div>
                  <div class="feature">
                      <span class="feature-icon">ü§ù</span>
                      <div>
                          <strong>Chia s·∫ª d·ªÖ d√†ng:</strong> 
                          Chia s·∫ª files v·ªõi b·∫°n b√® v√† ƒë·ªìng nghi·ªáp
                      </div>
                  </div>
                  <div class="feature">
                      <span class="feature-icon">üîê</span>
                      <div>
                          <strong>B·∫£o m·∫≠t cao:</strong> 
                          M√£ h√≥a d·ªØ li·ªáu v√† x√°c th·ª±c 2 b∆∞·ªõc
                      </div>
                  </div>
                  
                  <p>B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng ngay h√¥m nay:</p>
                  <a href="${process.env.FRONTEND_URL}" class="button">Truy c·∫≠p HostFileDrive</a>
                  
                  <p>N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i!</p>
              </div>
              <div class="footer">
                  <p>¬© 2025 HostFileDrive. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
                  <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
              </div>
          </div>
      </body>
      </html>
    `;

    const mailOptions = {
      from: `"HostFileDrive" <${process.env.EMAIL_FROM}>`,
      to: email,
      subject: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi HostFileDrive! üéâ',
      html: htmlContent
    };

    try {
      const result = await this.transporter.sendMail(mailOptions);
      winston.info(`‚úÖ Welcome email sent to ${email}`);
      return result;
    } catch (error) {
      winston.error(`‚ùå Failed to send welcome email to ${email}:`, error);
      throw new Error('Failed to send welcome email');
    }
  }

  /**
   * Send security alert email
   * @param {String} email - Recipient email
   * @param {String} name - Recipient name
   * @param {String} alertType - Type of security alert
   * @param {Object} details - Alert details
   */
  async sendSecurityAlert(email, name, alertType, details = {}) {
    const alertTypes = {
      'new_login': {
        title: 'ƒêƒÉng nh·∫≠p t·ª´ thi·∫øt b·ªã m·ªõi',
        icon: 'üîê',
        message: `C√≥ m·ªôt ƒëƒÉng nh·∫≠p m·ªõi v√†o t√†i kho·∫£n c·ªßa b·∫°n t·ª´ ${details.device || 'thi·∫øt b·ªã kh√¥ng x√°c ƒë·ªãnh'}.`
      },
      'password_changed': {
        title: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi',
        icon: 'üîë',
        message: 'M·∫≠t kh·∫©u t√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng.'
      },
      '2fa_enabled': {
        title: 'X√°c th·ª±c 2 b∆∞·ªõc ƒë√£ ƒë∆∞·ª£c b·∫≠t',
        icon: 'üõ°Ô∏è',
        message: 'X√°c th·ª±c 2 b∆∞·ªõc ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t cho t√†i kho·∫£n c·ªßa b·∫°n.'
      },
      'suspicious_activity': {
        title: 'Ph√°t hi·ªán ho·∫°t ƒë·ªông ƒë√°ng nghi',
        icon: '‚ö†Ô∏è',
        message: 'Ch√∫ng t√¥i ph√°t hi·ªán ho·∫°t ƒë·ªông b·∫•t th∆∞·ªùng tr√™n t√†i kho·∫£n c·ªßa b·∫°n.'
      }
    };

    const alert = alertTypes[alertType] || alertTypes['suspicious_activity'];

    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
          <meta charset="utf-8">
          <title>C·∫£nh b√°o b·∫£o m·∫≠t - HostFileDrive</title>
          <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
              .container { max-width: 600px; margin: 0 auto; padding: 20px; }
              .header { background: #ff9800; color: white; padding: 20px; text-align: center; }
              .content { padding: 30px 20px; }
              .alert-box { background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 5px; margin: 20px 0; }
              .details { background: #f9f9f9; padding: 15px; border-radius: 5px; margin: 15px 0; }
              .button { display: inline-block; background: #ff9800; color: white; padding: 12px 25px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
              .footer { background: #f5f5f5; padding: 20px; text-align: center; font-size: 12px; color: #666; }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header">
                  <h1>${alert.icon} C·∫£nh b√°o B·∫£o m·∫≠t</h1>
              </div>
              <div class="content">
                  <h2>Ch√†o ${name}!</h2>
                  
                  <div class="alert-box">
                      <h3>${alert.title}</h3>
                      <p>${alert.message}</p>
                  </div>
                  
                  ${details.timestamp ? `
                  <div class="details">
                      <h4>Chi ti·∫øt:</h4>
                      <ul>
                          <li><strong>Th·ªùi gian:</strong> ${details.timestamp}</li>
                          ${details.ip ? `<li><strong>IP:</strong> ${details.ip}</li>` : ''}
                          ${details.location ? `<li><strong>V·ªã tr√≠:</strong> ${details.location}</li>` : ''}
                          ${details.device ? `<li><strong>Thi·∫øt b·ªã:</strong> ${details.device}</li>` : ''}
                      </ul>
                  </div>
                  ` : ''}
                  
                  <p><strong>N·∫øu ƒë√¢y kh√¥ng ph·∫£i l√† b·∫°n:</strong></p>
                  <ul>
                      <li>ƒê·ªïi m·∫≠t kh·∫©u ngay l·∫≠p t·ª©c</li>
                      <li>Ki·ªÉm tra c√°c thi·∫øt b·ªã ƒë√£ ƒëƒÉng nh·∫≠p</li>
                      <li>B·∫≠t x√°c th·ª±c 2 b∆∞·ªõc n·∫øu ch∆∞a c√≥</li>
                      <li>Li√™n h·ªá h·ªó tr·ª£ n·∫øu c·∫ßn thi·∫øt</li>
                  </ul>
                  
                  <a href="${process.env.FRONTEND_URL}/settings/security" class="button">Ki·ªÉm tra B·∫£o m·∫≠t</a>
              </div>
              <div class="footer">
                  <p>¬© 2025 HostFileDrive. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
                  <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
              </div>
          </div>
      </body>
      </html>
    `;

    const mailOptions = {
      from: `"HostFileDrive Security" <${process.env.EMAIL_FROM}>`,
      to: email,
      subject: `‚ö†Ô∏è C·∫£nh b√°o b·∫£o m·∫≠t - ${alert.title}`,
      html: htmlContent
    };

    try {
      const result = await this.transporter.sendMail(mailOptions);
      winston.info(`‚úÖ Security alert email sent to ${email}`);
      return result;
    } catch (error) {
      winston.error(`‚ùå Failed to send security alert email to ${email}:`, error);
      throw new Error('Failed to send security alert email');
    }
  }
}

module.exports = new EmailService();
